"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[87357],{80420:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var n=i(85893),s=i(11151),a=i(4106);const o={sidebar_position:3},r="Experiment configuration",c={id:"docs/dev-manuals/architecture/experiment-configuration",title:"experiment-configuration",description:"Note that this page is still viable, but the MiSArch Experiment Tool has way more functionality by now and can be used instead.",source:"@site/docs/docs/dev-manuals/architecture/experiment-configuration.mdx",sourceDirName:"docs/dev-manuals/architecture",slug:"/docs/dev-manuals/architecture/experiment-configuration",permalink:"/docs/docs/dev-manuals/architecture/experiment-configuration",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Busines Processes",permalink:"/docs/docs/dev-manuals/architecture/business-processes"},next:{title:"Domain Tradeoff Analysis",permalink:"/docs/docs/dev-manuals/architecture/domain-tradeoff-analysis"}},d={},h=[{value:"Action sequence",id:"action-sequence",level:2},{value:"Adaptation architecture",id:"adaptation-architecture",level:2}];function l(e){const t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"Note that this page is still viable, but the MiSArch Experiment Tool has way more functionality by now and can be used instead."}),"\n"]}),"\n","\n",(0,n.jsx)(t.h1,{id:"experiment-configuration",children:"Experiment configuration"}),"\n",(0,n.jsxs)(t.p,{children:["MisArch is intended as a microservice reference architecture.\nAs such, it is possible to deterministically require certain conditions, i.e. a specific memory usage per pod.\nThe problem is here that every service can be deployed <x> times simultaenously in the form of replicas.\nAs such, the architecture to achieve this cannot be as simple as offering an endpoint to configure these limits on each service as the load balancer would only forward this request to ",(0,n.jsx)(t.strong,{children:"a single random pod"}),", not all of them."]}),"\n",(0,n.jsx)(t.p,{children:"Here's how we solved this problem:"}),"\n",(0,n.jsx)(t.h2,{id:"action-sequence",children:"Action sequence"}),"\n",(0,n.jsx)(a.Z,{path:"/images/experiment-configuration-sequence-diagram",alt:"sequence diagram how the experiment configuration works",width:"806",height:"421"}),"\n",(0,n.jsx)(t.p,{children:"As you can see in the diagram, most things are done automatically.\nMost notably, every pod queries the configurator for its pod ID to listen to when it starts, and each pods subscribes to events from the configurator.\nThis is needed as Kubernetes pods do not know that they are pods and have no idea of knowing it unless specifically told.\nSimilarly, the configurator regularly healthchecks each pod, and if the health check fails, the pod is pruned.\nIf a pruned pod fails more than <x>  successive health checks, it will be removed from the configurator and be assumed to have died."}),"\n",(0,n.jsx)(t.p,{children:"There are only two tasks left for the user to do:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Query the currently known services and pods"}),"\n",(0,n.jsxs)(t.li,{children:["Based on this query, send a command to the configurator to adapt the services with the given service name (and pod number, if given). The service name of any pod is constant and set at compile time, so you will typically have a good guess how it is called if you lowercase the name and replace all spaces with ",(0,n.jsx)(t.code,{children:"-"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"adaptation-architecture",children:"Adaptation architecture"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"experiment configuration architecture",src:i(25985).Z+"",width:"7688",height:"2388"})}),"\n",(0,n.jsx)(t.p,{children:"As soon as the user send the command to update the state of something, the configurator publishes the command as an event on the event bus, and as every pod is subscribed to such events, it will receive the payload and decide itself whether it needs to act."}),"\n",(0,n.jsx)(t.p,{children:"If the system scales due to your command, you are responsible yourself to manage the new pods.\nThe configurator simply forwards your events to the required pods and does not handle any other state."})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},4106:(e,t,i)=>{i.d(t,{Z:()=>h});var n=i(92949),s=i(44996),a=i(67294),o=i(99276),r=i(85893);function c(e){let{image:t}=e;const n=(0,a.useId)();return(0,a.useEffect)((()=>{let e=new o.Z({gallery:"#"+CSS.escape(n),children:"a",pswpModule:()=>i.e(15826).then(i.bind(i,15826))});return e.init(),()=>{e.destroy(),e=null}}),[]),(0,r.jsx)("div",{className:"pswp-gallery",id:n,children:(0,r.jsx)("a",{href:t.url,"data-pswp-width":t.width,"data-pswp-height":t.height,target:"_blank",rel:"noreferrer",children:(0,r.jsx)("img",{src:t.url,alt:t.alt})},n+"-0")})}var d=i(91262);function h(e){let{path:t,extension:i,alt:a,width:o,height:h}=e;const{colorMode:l}=(0,n.I)(),u={url:(0,s.Z)(`${t}-${l}.${i??"svg"}`),alt:a,width:o,height:h};return(0,r.jsx)(d.Z,{children:()=>(0,r.jsx)(c,{image:u})})}},25985:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/experiment-configuration-architecture-30103c3a6718c88cce3eb93eb5b030e8.svg"}}]);