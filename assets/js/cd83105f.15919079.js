"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[10499],{79280:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(85893),r=t(11151);const o={},s="Experiment Executor Frontend Service",l={id:"docs/dev-manuals/other-repositories/experiment-executor-frontend",title:"Experiment Executor Frontend Service",description:"The Experiment Executor Frontend is the web frontend used to create, modify, and execute experiments.",source:"@site/docs/docs/dev-manuals/other-repositories/experiment-executor-frontend.mdx",sourceDirName:"docs/dev-manuals/other-repositories",slug:"/docs/dev-manuals/other-repositories/experiment-executor-frontend",permalink:"/docs/docs/dev-manuals/other-repositories/experiment-executor-frontend",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Experiment Config Service",permalink:"/docs/docs/dev-manuals/other-repositories/experiment-config"},next:{title:"Experiment Executor Service",permalink:"/docs/docs/dev-manuals/other-repositories/experiment-executor"}},d={},c=[{value:"Technology Stack",id:"technology-stack",level:2},{value:"Repository Structure",id:"repository-structure",level:2},{value:"Important Components",id:"important-components",level:2},{value:"Graph / Experiment Overview",id:"graph--experiment-overview",level:3},{value:"MiSArch Experiment Config Editor and Chaos Toolkit Editor",id:"misarch-experiment-config-editor-and-chaos-toolkit-editor",level:3},{value:"Gatling Work Editor",id:"gatling-work-editor",level:3},{value:"Goal Editor",id:"goal-editor",level:3},{value:"Overlay",id:"overlay",level:3},{value:"Known Issues / Open Bugs",id:"known-issues--open-bugs",level:2},{value:"Technical Debt",id:"technical-debt",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"experiment-executor-frontend-service",children:"Experiment Executor Frontend Service"}),"\n",(0,i.jsx)(n.p,{children:"The Experiment Executor Frontend is the web frontend used to create, modify, and execute experiments.\nIt has minimal state, as it only keeps changes in the local browser state until they are saved or the website is closed.\nHowever, experiment management is performed by the Experiment Executor.\nTherefore, the frontend dynamically loads and stores the different parts of the experiment configurations via the API of the Experiment Executor."}),"\n",(0,i.jsx)(n.h2,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Language"}),": JavaScript"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Framework"}),": Vue.js"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Package Manager"}),": Yarn"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Builder"}),": Vite"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"repository-structure",children:"Repository Structure"}),"\n",(0,i.jsx)(n.p,{children:"The repository is structured as follows:"}),"\n",(0,i.jsx)("div",{className:"repository-structure",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/src/"}),": The source code","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"components/"}),": ",(0,i.jsx)(n.a,{href:"https://vuejs.org/glossary/#single-file-component",children:"Single-File Components"})," that can be reused -- this is basically an internal UI components library."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"model/"}),": Data models used in the frontend."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"types/"}),": TypeScript types."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"util/"}),": Utility source code."]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"important-components",children:"Important Components"}),"\n",(0,i.jsx)(n.p,{children:"The most important components are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The Graph / Experiment Overview"}),"\n",(0,i.jsx)(n.li,{children:"The MiSArch Experiment Config Editor"}),"\n",(0,i.jsx)(n.li,{children:"The Chaos Toolkit Editor"}),"\n",(0,i.jsx)(n.li,{children:"The Gatling Work Editor"}),"\n",(0,i.jsx)(n.li,{children:"The Goal Editor"}),"\n",(0,i.jsx)(n.li,{children:"Overlay"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"graph--experiment-overview",children:"Graph / Experiment Overview"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The graph component is the main visualization component of the frontend."}),"\n",(0,i.jsxs)(n.li,{children:["It uses ",(0,i.jsx)(n.a,{href:"https://www.chartjs.org/",children:"chart.js"})," to visualize the different experiment components."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"misarch-experiment-config-editor-and-chaos-toolkit-editor",children:"MiSArch Experiment Config Editor and Chaos Toolkit Editor"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The editors are based on ",(0,i.jsx)(n.a,{href:"https://microsoft.github.io/monaco-editor/",children:"Monaco Editor"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"They both can be switched between a code view and a form view."}),"\n",(0,i.jsx)(n.li,{children:"The form view is dynamically generated based on the JSON schema of the respective configuration."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"gatling-work-editor",children:"Gatling Work Editor"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The Gatling Work Editor is a Monaco Editor that allows the user to create and modify Gatling Work scenarios."}),"\n",(0,i.jsx)(n.li,{children:"It lets write users Kotlin code for the Gatling scenarios."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"goal-editor",children:"Goal Editor"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The Goal Editor is a simple visual area that allows the user to define the goals of the experiment."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"overlay",children:"Overlay"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The overlay component is used to display the"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"known-issues--open-bugs",children:"Known Issues / Open Bugs"}),"\n",(0,i.jsx)(n.p,{children:"There are several known issues and open bugs in the experiment executor frontend:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Help texts are often black on black background in other operating systems then macOS."}),"\n",(0,i.jsx)(n.li,{children:"When there are large experiments the graph can become slow and unresponsive."}),"\n",(0,i.jsx)(n.li,{children:"Technical debt and code smells."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"technical-debt",children:"Technical Debt"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"This section is written from the personal perspective of the experiment tool developer during the time of the Master Thesis."})}),"\n",(0,i.jsx)(n.p,{children:"Sadly, there is already some technical debt. Why? Because at the beginning of the thesis I was still a complete beginner when it came to frontend\ndevelopment with Vue, TypeScript, and JavaScript in general.\nSome things I only understood and learned to use properly over time meaning issue by issue.\nAs we did not have the time to refactor everything as soon as possible, we had to prioritize the implementation of additional features to ensure that the frontend would be at least somehow feature-complete at the end of the project."})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>s});var i=t(67294);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);