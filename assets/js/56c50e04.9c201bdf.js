"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2508],{29798:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var i=n(85893),r=n(11151);const o={},s="Gatling Executor Service",c={id:"docs/dev-manuals/other-repositories/gatling-executor",title:"Gatling Executor Service",description:"The Gatling Executor is a wrapper container that, on the one hand, contains a simple web server and web client to communicate with the Experiment",source:"@site/docs/docs/dev-manuals/other-repositories/gatling-executor.mdx",sourceDirName:"docs/dev-manuals/other-repositories",slug:"/docs/dev-manuals/other-repositories/gatling-executor",permalink:"/docs/docs/dev-manuals/other-repositories/gatling-executor",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Experiment Executor Service",permalink:"/docs/docs/dev-manuals/other-repositories/experiment-executor"},next:{title:"Kubernetes setup",permalink:"/docs/docs/dev-manuals/other-repositories/infrastructure-k8s"}},l={},a=[{value:"Technology Stack",id:"technology-stack",level:2},{value:"API",id:"api",level:2},{value:"Repository Structure",id:"repository-structure",level:2},{value:"Functionality Overview",id:"functionality-overview",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"gatling-executor-service",children:"Gatling Executor Service"}),"\n",(0,i.jsx)(t.p,{children:"The Gatling Executor is a wrapper container that, on the one hand, contains a simple web server and web client to communicate with the Experiment\nExecutor and, on the other hand, contains the Gatling source files which will be compiled and executed dynamically at runtime using Gradle."}),"\n",(0,i.jsx)(t.p,{children:"The details of a specific experiment are forwarded from the Experiment Executor\nand executed immediately.\nFinally, the results of the execution that are collected from Gatling are forwarded back to the Experiment Executor for finalization.\nIt is useful to deploy this service to a dedicated infrastructure environment, as resource consumption for load generation can be significant, so the\ndeployment of the Gatling Executor should be isolated."}),"\n",(0,i.jsx)(t.h2,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Language"}),": Kotlin"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Framework"}),": Spring Boot"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Build Tool"}),": Gradle"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Load Testing Tool"}),": ",(0,i.jsx)(t.a,{href:"https://gatling.io/",children:"Gatling"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Kotlin DSL for Gatling"}),": ",(0,i.jsx)(t.a,{href:"https://gatling.io/docs/gatling/reference/current/extensions/kotlin-dsl/",children:"Kotlin DSL"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,i.jsx)(t.p,{children:"The Gatling Executor exposes the following REST API endpoints to manage and execute Gatling load tests."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"POST /start-experiment"})," - Start the execution of a Gatling load test"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"POST /stop-experiment"})," - Stop the execution"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"repository-structure",children:"Repository Structure"}),"\n",(0,i.jsx)("div",{className:"repository-structure",children:(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"/gatling-server/src"}),": Source code of the web server Spring Boot component"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"controller/"}),": Package that includes the REST controller"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"service/"}),": Package for all service classes containing the actual business logic"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"/gatling-test/src"}),": Source code of the Gatling load testing component"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"kotlin"}),": Kotlin source files that are compiled on experiment start by Gradle, which will be extend by the dynamic Kotlin files received from the API"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"resources"}),": Template files for reference"]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(t.h2,{id:"functionality-overview",children:"Functionality Overview"}),"\n",(0,i.jsx)(t.p,{children:"Important to note is that the Gatling Executor creates a new Gradle job for each experiment execution.\nThis job compiles the Gatling test source code, which consists of static template files and dynamic files received from the Experiment Executor via the API.\nAfter the compilation, the Gradle job executes the Gatling test, which generates a report that is sent back to the Experiment Executor after the\nexecution is finished in another dedicated Gradle Job."}),"\n",(0,i.jsx)(t.p,{children:"If a steady-state hypothesis or warm-up is configured, those are executed first before the actual load test starts in dedicated Gatling jobs."})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>s});var i=n(67294);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);